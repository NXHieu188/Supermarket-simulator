{"id":398,"assetBundleId":-1,"data":[[],"Simple Toon\/SToon Outline",null,["DIRECTIONAL","DIRLIGHTMAP_COMBINED","LIGHTMAP_ON","LIGHTPROBE_SH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","VERTEXLIGHT_ON","DIRECTIONAL_COOKIE","POINT","POINT_COOKIE","SHADOWS_DEPTH","SPOT","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","SHADOWS_CUBE","SHADOWS_SOFT"],[[0,0,"DirectLight",4,"",0,[4,null],[1,null],[2,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","FORWARDBASE"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON"],[],[[0,0,["DIRECTIONAL","LIGHTPROBE_SH"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nint u_xlati3;\nbool u_xlatb3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nvec3 u_xlat7;\nfloat u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_15;\nfloat u_xlat17;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_NORMAL0.xyz;\n    u_xlat16_15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_15 = inversesqrt(u_xlat16_15);\n    u_xlat16_1.xyz = vec3(u_xlat16_15) * _WorldSpaceLightPos0.xyz;\n    u_xlat2 = dot(u_xlat16_0.xyz, u_xlat16_1.xyz);\n    u_xlat7.x = max(_Offset, -1.0);\n    u_xlat7.x = min(u_xlat7.x, 1.0);\n    u_xlat12 = u_xlat7.x + u_xlat2;\n    u_xlat2 = u_xlat2 + -1.0;\n    u_xlat7.x = u_xlat7.x + 1.0;\n    u_xlat7.x = u_xlat12 \/ u_xlat7.x;\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat12 = floor(_Steps);\n    u_xlat12 = float(1.0) \/ u_xlat12;\n    u_xlat12 = (_Segmented != 0) ? u_xlat12 : 1.0;\n    u_xlat17 = u_xlat7.x \/ u_xlat12;\n    u_xlat17 = ceil(u_xlat17);\n    u_xlat3.x = u_xlat17 * u_xlat12 + (-u_xlat12);\n    u_xlat8 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat13 = u_xlat12 * u_xlat8 + u_xlat3.x;\n    u_xlat8 = u_xlat8 + 0.340000004;\n    u_xlat8 = u_xlat8 * 4.69999981;\n    u_xlat8 = 2.0 \/ u_xlat8;\n    u_xlat8 = (-u_xlat8) + 1.29999995;\n    u_xlat18 = (-u_xlat13) + u_xlat3.x;\n    u_xlatb3 = u_xlat3.x==u_xlat13;\n    u_xlat7.x = u_xlat7.x + (-u_xlat13);\n    u_xlat13 = float(1.0) \/ u_xlat18;\n    u_xlat18 = u_xlat7.x \/ u_xlat18;\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat7.x = u_xlat7.x * u_xlat13;\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat13 = (u_xlatb3) ? 0.0 : u_xlat18;\n    u_xlat18 = u_xlat7.x * -2.0 + 3.0;\n    u_xlat7.x = u_xlat7.x * u_xlat7.x;\n    u_xlat7.x = u_xlat7.x * u_xlat18;\n    u_xlat7.x = (u_xlatb3) ? 0.0 : u_xlat7.x;\n    u_xlat3.x = (-u_xlat7.x) + u_xlat13;\n    u_xlat7.x = u_xlat8 * u_xlat3.x + u_xlat7.x;\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlati3 = int(u_xlat17);\n    u_xlat17 = u_xlat12 * u_xlat17;\n    u_xlatb3 = u_xlati3==1;\n    u_xlat8 = _Offset + -1.0;\n    u_xlat8 = u_xlat8 * 10.0;\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat8 = (-u_xlat8) + 1.0;\n    u_xlat3.x = (u_xlatb3) ? u_xlat8 : 1.0;\n    u_xlat7.x = u_xlat7.x * u_xlat3.x;\n    u_xlat7.x = (-u_xlat7.x) * u_xlat12 + u_xlat17;\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat12 = u_xlat7.x + (-_MinLight);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat17 = max(_MaxLight, _MinLight);\n    u_xlat3.x = u_xlat17 + (-_MinLight);\n    u_xlat17 = u_xlat17 + _Lumin;\n    u_xlat12 = u_xlat12 \/ u_xlat3.x;\n    u_xlat3.x = u_xlat17 + (-_MinLight);\n    u_xlat12 = u_xlat12 * u_xlat3.x + _MinLight;\n    u_xlat7.x = u_xlat3.x * u_xlat7.x + _MinLight;\n    u_xlat12 = max(u_xlat12, _MinLight);\n    u_xlat12 = min(u_xlat17, u_xlat12);\n    u_xlat3.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat7.x = u_xlat7.x * u_xlat3.y;\n    u_xlat7.x = u_xlat3.x * u_xlat12 + u_xlat7.x;\n    u_xlat3.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat3.xyz = vec3(_AmbientCol) * u_xlat3.xyz + _Color.xyz;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat10_4.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat4.xyz = u_xlat7.xxx * u_xlat3.xyz;\n    u_xlat7.xyz = (-u_xlat7.xxx) * u_xlat3.xyz + _ShnColor.xyz;\n    u_xlat3.x = (-_ShnRange) * 2.0 + abs(u_xlat2);\n    u_xlat2 = _ShnRange * 2.0 + -abs(u_xlat2);\n    u_xlatb2 = u_xlat2>=0.0;\n    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat2 = u_xlat2 * _ShnIntense;\n    u_xlat8 = (-_ShnSmooth) + 1.0;\n    u_xlat13 = _ShnRange + _ShnRange;\n    u_xlat18 = u_xlat13 * u_xlat8 + (-u_xlat13);\n    u_xlat8 = u_xlat8 * u_xlat13;\n    u_xlatb8 = u_xlat8==u_xlat13;\n    u_xlat13 = float(1.0) \/ u_xlat18;\n    u_xlat3.x = u_xlat13 * u_xlat3.x;\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat13 = u_xlat3.x * -2.0 + 3.0;\n    u_xlat3.x = u_xlat3.x * u_xlat3.x;\n    u_xlat3.x = u_xlat3.x * u_xlat13;\n    u_xlat3.x = (u_xlatb8) ? 1.0 : u_xlat3.x;\n    u_xlat2 = u_xlat2 * u_xlat3.x;\n    u_xlat0.xyz = vec3(u_xlat2) * u_xlat7.xyz + u_xlat4.xyz;\n    u_xlatb2 = 0.0<_LightColor0.w;\n    u_xlat0.w = 1.0;\n    u_xlat0 = bool(u_xlatb2) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0,0]],[],0],[1,0,"SpotLight",5,"",0,[4,null],[1,null],[2,null],[[1,null],[0,null],[4,null]],[[1,null],[0,null],[4,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","FORWARDADD"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],["DIRECTIONAL","DIRECTIONAL_COOKIE","LIGHTMAP_SHADOW_MIXING","POINT","POINT_COOKIE","SHADOWS_CUBE","SHADOWS_DEPTH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","SHADOWS_SOFT","SPOT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],[],[],[],0],[2,0,"",0,"",1,[0,null],[0,null],[0,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[0,null],[0,null],[[0,null],[0,null],[0,null],[0,null]],[[0,null],[0,null],[0,null],[0,null]],[[0,null],[0,null],[0,null],[0,null]],[],[],[],[],[],0],[3,0,"",4,"",0,[4,null],[1,null],[1,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","FORWARDBASE"],["RenderType","Opaque"]],["STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO"],[],[[3,0,[],"\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _OtlWidth;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_OtlWidth);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00800000038, 0.00800000038, 0.00800000038) + in_POSITION0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _OtlColor;\nuniform \tfloat _OtlWidth;\n#define SV_Target0 gl_FragData[0]\nbool u_xlatb0;\nvoid main()\n{\n    u_xlatb0 = 0.0>=_OtlWidth;\n    if(u_xlatb0){discard;}\n    SV_Target0 = _OtlColor;\n    return;\n}\n\n",0,0]],[],0]],[[0,68,"SHADOWCASTER"]],[["_MainTex",4,0,0,0,0,"white",0],["_Color",0,1,1,1,1,"",0],["_ColIntense",3,1,0,3,0,"",1],["_ColBright",3,0,-1,1,0,"",1],["_AmbientCol",3,0,0,1,0,"",0],["_Segmented",2,1,0,0,0,"",0],["_Steps",3,3,1,25,0,"",0],["_StpSmooth",3,0,0,1,0,"",0],["_Offset",3,0,-1,1.10000002384186,0,"",0],["_Clipped",2,0,0,0,0,"",0],["_MinLight",3,0,0,1,0,"",0],["_MaxLight",3,1,0,1,0,"",0],["_Lumin",3,0,0,2,0,"",0],["_OtlColor",0,0,0,0,1,"",0],["_OtlWidth",3,1,0,5,0,"",0],["_ShnColor",0,1,1,0,1,"",16],["_ShnOverlap",2,0,0,0,0,"",0],["_ShnIntense",3,0,0,1,0,"",0],["_ShnRange",3,0.150000005960464,0,1,0,"",0],["_ShnSmooth",3,0,0,1,0,"",0]],null,null,0,0,0]}